generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Attendances {
  attendanceId String    @id @default(dbgenerated("gen_random_uuid()")) @map("attendance_id") @db.Uuid
  teacherId    String?   @map("teacher_id") @db.Uuid
  studentId    String?   @map("student_id") @db.Uuid
  classId      String    @map("class_id") @db.Uuid
  date         DateTime  @db.Date
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  status       Status    @default(absent)
  classes      Classes   @relation(fields: [classId], references: [classId], onDelete: NoAction, onUpdate: NoAction)
  students     Students? @relation(fields: [studentId], references: [studentId], onDelete: NoAction, onUpdate: NoAction)
  teachers     Teachers? @relation(fields: [teacherId], references: [teacherId], onDelete: NoAction, onUpdate: NoAction)

  @@index([date, classId], map: "idx_attendances_date_class_id")
  @@index([studentId], map: "idx_attendances_student_id")
  @@index([teacherId], map: "idx_attendances_teacher_id")
  @@map("attendances")
}

enum Status {
  present
  absent

  @@map("status")
}

model Classes {
  classId     String        @id @default(dbgenerated("gen_random_uuid()")) @map("class_id") @db.Uuid
  levelId     String        @map("level_id") @db.Uuid
  name        String        @unique @db.VarChar(50)
  description String?       @db.Text()
  createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime      @default(now()) @map("updated_at") @db.Timestamptz(6)
  attendances Attendances[]
  levels      Levels        @relation(fields: [levelId], references: [levelId], onDelete: NoAction, onUpdate: NoAction)
  schedules   Schedules[]
  students    Students[]

  @@unique([levelId, name])
  @@index([levelId], map: "idx_classes_level_id")
  @@map("classes")
}

model Levels {
  levelId     String    @id @default(dbgenerated("gen_random_uuid()")) @map("level_id") @db.Uuid
  name        String    @unique @db.VarChar(50)
  description String?   @db.Text()
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  classes     Classes[]

  @@index([name], map: "idx_levels_name")
  @@map("levels")
}

enum Baptized {
  yes
  no

  @@map("baptized")
}

model People {
  personId     String    @id @default(dbgenerated("gen_random_uuid()")) @map("person_id") @db.Uuid
  name         String    @db.VarChar(100)
  personalCode String    @unique @map("personal_code") @db.VarChar(100)
  birthDate    DateTime  @map("birth_date") @db.Date
  baptized     Baptized  @default(no)
  profession   String?   @db.VarChar(100)
  phone        String?   @db.VarChar(20)
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  students     Students?
  teachers     Teachers?
  users        Users?

  @@index([personId], map: "idx_people_person_id")
  @@map("people")
}

model Schedules {
  scheduleId String   @id @default(dbgenerated("gen_random_uuid()")) @map("schedule_id") @db.Uuid
  teacherId  String   @map("teacher_id") @db.Uuid
  classId    String   @map("class_id") @db.Uuid
  date       DateTime @db.Date
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  classes    Classes  @relation(fields: [classId], references: [classId], onDelete: NoAction, onUpdate: NoAction)
  teachers   Teachers @relation(fields: [teacherId], references: [teacherId], onDelete: NoAction, onUpdate: NoAction)

  @@unique([classId, date])
  @@index([date, classId], map: "idx_schedules_date_class_id")
  @@map("schedules")
}

model Students {
  studentId   String        @id @default(dbgenerated("gen_random_uuid()")) @map("student_id") @db.Uuid
  accessKey   String        @unique(map: "idx_students_access_key") @map("access_key") @db.VarChar(100)
  personId    String        @unique @map("person_id") @db.Uuid
  classId     String        @map("class_id") @db.Uuid
  createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime      @default(now()) @map("updated_at") @db.Timestamptz(6)
  attendances Attendances[]
  classes     Classes       @relation(fields: [classId], references: [classId], onDelete: NoAction, onUpdate: NoAction)
  people      People        @relation(fields: [personId], references: [personId], onDelete: NoAction, onUpdate: NoAction)

  @@index([classId], map: "idx_students_class_id")
  @@map("students")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model TeacherEvaluations {
  evaluationId String   @id @default(dbgenerated("gen_random_uuid()")) @map("evaluation_id") @db.Uuid
  teacherId    String   @map("teacher_id") @db.Uuid
  date         DateTime @db.Date
  score        Int
  comment      String?
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  teachers     Teachers @relation(fields: [teacherId], references: [teacherId], onDelete: NoAction, onUpdate: NoAction)

  @@index([teacherId, date], map: "idx_teacher_evaluations_teacher_id_date")
  @@map("teacher_evaluations")
}

model Teachers {
  teacherId          String               @id @default(dbgenerated("gen_random_uuid()")) @map("teacher_id") @db.Uuid
  personId           String               @unique @map("person_id") @db.Uuid
  userId             String?              @unique @map("user_id") @db.Uuid
  position           String               @db.VarChar(100)
  trainingYear       DateTime             @map("training_year") @db.Date
  createdAt          DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime             @default(now()) @map("updated_at") @db.Timestamptz(6)
  attendances        Attendances[]
  schedules          Schedules[]
  teacherEvaluations TeacherEvaluations[]
  people             People               @relation(fields: [personId], references: [personId], onDelete: NoAction, onUpdate: NoAction)

  @@index([teacherId], map: "idx_teachers_teacher_id")
  @@map("teachers")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Users {
  userId       String   @id @default(dbgenerated("gen_random_uuid()")) @map("user_id") @db.Uuid
  personId     String   @unique @map("person_id") @db.Uuid
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  role         Role     @default(teacher)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  people       People   @relation(fields: [personId], references: [personId], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId], map: "idx_users_user_id")
  @@map("users")
}

enum Role {
  teacher
  student

  @@map("role")
}
